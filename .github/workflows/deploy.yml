name: CI/CD Deploy to VPS

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/book-inventories
  IMAGE_TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Copy docker-compose to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "deploy/docker-compose.yml"
          target: ${{ secrets.VPS_DEPLOY_PATH }}

      - name: Deploy on VPS via SSH
        uses: appleboy/ssh-action@v1.0.7
        env:
          REGISTRY_IMAGE: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            cd ${{ secrets.VPS_DEPLOY_PATH }}
            echo "Logging in to Docker Hub"
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            if [ ! -f .env ]; then
              echo "Missing .env in ${{ secrets.VPS_DEPLOY_PATH }}. Create it from deploy/.env.example and set secrets.";
              exit 1;
            fi
            export REGISTRY_IMAGE=${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            docker compose pull
            docker compose up -d --remove-orphans
            docker image prune -f
            docker system prune -f || true